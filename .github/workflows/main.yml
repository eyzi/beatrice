name: Main

on:
  push:
    branches: [main]

jobs:
  test:
    name: Checkout and Test
    runs-on: self-hosted
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/checkout@v2
        name: Checkout
        with:
          fetch-depth: 0
      - name: Install
        run: yarn build:install
      - name: Run Test
        run: yarn test

  build:
    name: Version and Build
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    runs-on: self-hosted
    needs: [test]
    env:
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      DOCKER_GROUP: ${{ secrets.DOCKER_GROUP }}
    steps:
      - name: Get list
        id: lerna
        run: |
          SCOPES=$(npx lerna changed --json -a | jq 'map(.name) | join(",")' | tr -d '"')
          echo "::set-output name=scopes::$SCOPES"
      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{secrets.GPG_KEY}}
          passphrase: ${{secrets.GPG_PASS}}
          git_committer_name: ${{secrets.GIT_NAME}}
          git_committer_email: ${{secrets.GIT_EMAIL}}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
      - name: Bump version
        run: |
          git config --local gpg.program $(which gpg)
          git remote set-url origin "https://${{secrets.GIT_NAME}}:${{secrets.GIT_TOKEN}}@github.com/$GITHUB_REPOSITORY"
          yarn lerna:version
      - uses: docker/login-action@v1
        name: Login to docker registry
        with:
          registry: ${{secrets.DOCKER_REGISTRY}}
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Build docker images
        run: |
          if [[ "${{ steps.lerna.outputs.scopes }}" != "" ]]; then
            yarn build:docker --scope={${{ steps.lerna.outputs.scopes }},}
          fi
      - name: Push docker images
        run: docker images --filter "reference=$DOCKER_REGISTRY/$DOCKER_GROUP-*:latest" --format {{.Repository}} | xargs -I IMG docker image push --all-tags IMG > /dev/null
      - name: Push new version
        run: git push --follow-tags origin ${{github.ref_name}}
      - name: Clean docker images
        run: docker rmi -f $(docker images --filter "reference=$DOCKER_REGISTRY/$DOCKER_GROUP-*" --format {{.ID}}) > /dev/null
        continue-on-error: true
